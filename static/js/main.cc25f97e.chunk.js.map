{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","key","this","winningSquares","includes","squares","map","j","index","Math","floor","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","sortDesc","slice","length","calculateWinner","setState","concat","location","step","status","current","winner","moves","move","desc","jumpTo","player","line","handleClick","handleReset","handleSort","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc25f97e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = (props) => {\n    return (\n        <button\n            className={'square ' + (props.highlight ? 'winning-square' : '')}\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                key={i}\n                highlight={this.props.winningSquares.includes(i)}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        )\n    }\n\n    render() {\n        return (\n            <div>{ [0, 1, 2].map((i) => {\n                return (\n                    <div key={i} className=\"board-row\">\n                        {[0, 1, 2].map((j) => {\n                            let index = Math.floor((3 * j) / 3) + 3 * i;\n                            return this.renderSquare(index)\n                        })}\n                    </div>\n                )})\n            }</div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{ \n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            sortDesc: true\n        }\n    }\n\n    handleClick(i) {\n        const sqLocations = [\n            [1, 1], [2, 1], [3, 1], \n            [1, 2], [2, 2], [3, 2], \n            [1, 3], [2, 3], [3, 3]\n        ];\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const winner = calculateWinner(squares);\n        if (winner || squares[i]) return;\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                location: sqLocations[i]\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    handleSort() {\n        this.setState({\n            sortDesc: !this.state.sortDesc\n        })\n    }\n\n    handleReset() {\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            sortDesc: true\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move + ` @(${history[move].location})` :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = `Winner: ${winner.player}!`;\n        } else if (!current.squares.includes(null)) {\n            status = 'Game ends in a draw :/';\n        } else {\n            status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n        }\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>react tic-tac-toe</p>\n                </header>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            winningSquares={winner ? winner.line : []}\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)} />\n                        <div className='reset-btn'>\n                            <button onClick={() => this.handleReset()}>Reset Game</button>\n                        </div>\n                    </div>\n                    <div className=\"game-info\">\n                        <div className='status'>{status}</div>\n                        <button className='sort-btn' onClick={() => this.handleSort()}>Sort Moves</button>\n                        <ol>{ this.state.sortDesc ? moves : moves.reverse() }</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return { player: squares[a], line: [a, b, c] };\n        }\n    }\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}